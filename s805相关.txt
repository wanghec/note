screenrecord调用过程简单描述：
使用安卓标准的api（mediacodec），可以进行编码和解码。

mediacodec会使用libstagefright.so

libstagefright.so会使用libstagefright_omx.so;libstagefright_omx.so会将libstagefrighthw.so以plugin的方式加入进来，同时也会加入一些软编解码库libstagefright_soft_amrdec.so
编码顺序及类型定义在 device/amlogic/m201/media_codecs.xml中描述。


（1）libstagefrighthw.so为硬件厂商实现的硬编码和硬解码库，在hardware/amlogic/libstagefrighthw中。
（2）libstagefright.so在frameworks/av/media/libstagefright中生成。
具体的过程可以参看frameworks/av/media/libstagefright/中的相关源文件。


uboot待机
appf及arc部分 编译简单描述
（1）arch/arm/cpu/aml_meson/m8b/下的Makefile会调用arch/arm/cpu/aml_meson/m8b/firmware/arc_power/Makefile编译出arc_code.dat。
（2）arch/arm/cpu/aml_meson/m8b/下的Makefile会在调用arch/arm/cpu/aml_meson/m8b/firmware/appf/Makefile编译出power_firmware.dat(arch/arm/cpu/aml_meson/m8b/firmware/appf/platform/a9-e/bpower.c会 include “arc_code.dat”)。
（3）arch/arm/cpu/aml_meson/m8b/目录下的firmwareld.c编译时依赖 power_firmware.dat
（4）最终他们都编译到uboot中。

uboot调用过程：
（1）初始化硬件
（2）main_loop中调用init_suspend_firmware（）将appf固件代码复制到内存指定位置；
（3）引导内核。


内核待机过程
（1）进入内核待机流程
（2）进入平台相关待机部分（arch/arm/mach-meson8b/power_suspend.c）
（3）通过调用进入到appf固件代码中，appf进入待机流程，运行arch/arm/cpu/aml_meson/m8b/firmware/appf/platform/a9-eb/power.c中的run_arc_program程序，将arc部分固件代码复制到内存指定位置。
（4）进入到arc程序部分循环，等待待机触发唤醒。

ARM 社区一贯充斥的大量垃圾代码导致Linus盛怒，因此社区在2011年到2012年进行了大量的工作。ARM Linux开始围绕Device  Tree展开，Device  Tree有自己的独立的语法，它的源文件为.dts，编译后得到.dtb，Bootloader在引导Linux内核的时候会将.dtb地址告知内核。之 后内核会展开Device  Tree并创建和注册相关的设备，因此arch/arm/mach-xxx和arch/arm/plat-xxx中大量的用于注册platform、 I2C、SPI板级信息的代码被删除，而驱动也以新的方式和.dts中定义的设备结点进行匹配。

  Device Tree组成和结构
整个Device Tree牵涉面比较广，即增加了新的用于描述设备硬件信息的文本格式，又增加了编译这一文本的工具，同时Bootloader也需要支持将编译后的Device Tree传递给Linux内核。
DTS (device tree source)
.dts文件是一种ASCII 文本格式的Device Tree描述，此文本格式非常人性化，适合人类的阅读习惯。基本上，在ARM Linux在，一个.dts文件对应一个ARM的machine，一般放置在内核的arch/arm/boot/dts/目录。由于一个SoC可能对应多个machine（一个SoC可以对应多个产品和电路板），势必这些.dts文件需包含许多共同的部分，Linux内核为了简化，把SoC公用的部分或者多个machine共同的部分一般提炼为.dtsi，类似于C语言的头文件。其他的machine对应的.dts就include这个.dtsi。譬如，对于VEXPRESS而言，vexpress-v2m.dtsi就被vexpress-v2p-ca9.dts所引用， vexpress-v2p-ca9.dts有如下一行：
/include/ "vexpress-v2m.dtsi"
当然，和C语言的头文件类似，.dtsi也可以include其他的.dtsi，譬如几乎所有的ARM SoC的.dtsi都引用了skeleton.dtsi。
.dts（或者其include的.dtsi）基本元素即为前文所述的结点和属性：

DTC (device tree compiler)
将.dts编译为.dtb的工具。DTC的源代码位于内核的scripts/dtc目录，在Linux内核使能了Device Tree的情况下，编译内核的时候主机工具dtc会被编译出来，对应scripts/dtc/Makefile中的“hostprogs-y := dtc”这一hostprogs编译target。
在Linux内核的arch/arm/boot/dts/Makefile中，描述了当某种SoC被选中后，哪些.dtb文件会被编译出来，如与VEXPRESS对应的.dtb包括
在Linux下，我们可以单独编译Device Tree文件。当我们在Linux内核下运行make dtbs时，若我们之前选择了ARCH_VEXPRESS，上述.dtb都会由对应的.dts编译出来。因为arch/arm/Makefile中含有一个dtbs编译target项目

Device Tree Blob (.dtb)
.dtb是.dts被DTC编译后的二进制格式的Device Tree描述，可由Linux内核解析。通常在我们为电路板制作NAND、SD启动image时，会为.dtb文件单独留下一个很小的区域以存放之，之后bootloader在引导kernel的过程中，会先读取该.dtb到内存。

amlogic平台cpu freq相关
（1）amlogic的dts部分在common/arch/arm/boot/dts/amlogic中，它里面全是*.dtd，不是标准的*.dts；他是利用scripts/amlogic/aml_dtd.sh将*.dtd转换成*.dtb。
（2）s805使用的dtd表为meson8b_m201_1G.dtd，其中与dvfs相关的表为dvfs_table和cs_voltage_table。
（3）频率调整注意：升高频率，先增加cpu核电压，在设置cpu频率；降低频率，先设置cpu频率，在降低核电压。
