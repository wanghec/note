screenrecord调用过程简单描述：
使用安卓标准的api（mediacodec），可以进行编码和解码。

mediacodec会使用libstagefright.so

libstagefright.so会使用libstagefright_omx.so;libstagefright_omx.so会将libstagefrighthw.so以plugin的方式加入进来，同时也会加入一些软编解码库libstagefright_soft_amrdec.so
编码顺序及类型定义在 device/amlogic/m201/media_codecs.xml中描述。


（1）libstagefrighthw.so为硬件厂商实现的硬编码和硬解码库，在hardware/amlogic/libstagefrighthw中。
（2）libstagefright.so在frameworks/av/media/libstagefright中生成。
具体的过程可以参看frameworks/av/media/libstagefright/中的相关源文件。


uboot待机
appf及arc部分 编译简单描述
（1）arch/arm/cpu/aml_meson/m8b/下的Makefile会调用arch/arm/cpu/aml_meson/m8b/firmware/arc_power/Makefile编译出arc_code.dat。
（2）arch/arm/cpu/aml_meson/m8b/下的Makefile会在调用arch/arm/cpu/aml_meson/m8b/firmware/appf/Makefile编译出power_firmware.dat(arch/arm/cpu/aml_meson/m8b/firmware/appf/platform/a9-e/bpower.c会 include “arc_code.dat”)。
（3）arch/arm/cpu/aml_meson/m8b/目录下的firmwareld.c编译时依赖 power_firmware.dat
（4）最终他们都编译到uboot中。

uboot调用过程：
（1）初始化硬件
（2）main_loop中调用init_suspend_firmware（）将appf固件代码复制到内存指定位置；
（3）引导内核。


内核待机过程
（1）进入内核待机流程
（2）进入平台相关待机部分（arch/arm/mach-meson8b/power_suspend.c）
（3）通过调用进入到appf固件代码中，appf进入待机流程，运行arch/arm/cpu/aml_meson/m8b/firmware/appf/platform/a9-eb/power.c中的run_arc_program程序，将arc部分固件代码复制到内存指定位置。
（4）进入到arc程序部分循环，等待待机触发唤醒。

dtb相关
ARM 社区一贯充斥的大量垃圾代码导致Linus盛怒，因此社区在2011年到2012年进行了大量的工作。ARM Linux开始围绕Device  Tree展开，Device  Tree有自己的独立的语法，它的源文件为.dts，编译后得到.dtb，Bootloader在引导Linux内核的时候会将.dtb地址告知内核。之 后内核会展开Device  Tree并创建和注册相关的设备，因此arch/arm/mach-xxx和arch/arm/plat-xxx中大量的用于注册platform、 I2C、SPI板级信息的代码被删除，而驱动也以新的方式和.dts中定义的设备结点进行匹配。

  Device Tree组成和结构
整个Device Tree牵涉面比较广，即增加了新的用于描述设备硬件信息的文本格式，又增加了编译这一文本的工具，同时Bootloader也需要支持将编译后的Device Tree传递给Linux内核。
DTS (device tree source)
.dts文件是一种ASCII 文本格式的Device Tree描述，此文本格式非常人性化，适合人类的阅读习惯。基本上，在ARM Linux在，一个.dts文件对应一个ARM的machine，一般放置在内核的arch/arm/boot/dts/目录。由于一个SoC可能对应多个machine（一个SoC可以对应多个产品和电路板），势必这些.dts文件需包含许多共同的部分，Linux内核为了简化，把SoC公用的部分或者多个machine共同的部分一般提炼为.dtsi，类似于C语言的头文件。其他的machine对应的.dts就include这个.dtsi。譬如，对于VEXPRESS而言，vexpress-v2m.dtsi就被vexpress-v2p-ca9.dts所引用， vexpress-v2p-ca9.dts有如下一行：
/include/ "vexpress-v2m.dtsi"
当然，和C语言的头文件类似，.dtsi也可以include其他的.dtsi，譬如几乎所有的ARM SoC的.dtsi都引用了skeleton.dtsi。
.dts（或者其include的.dtsi）基本元素即为前文所述的结点和属性：

DTC (device tree compiler)
将.dts编译为.dtb的工具。DTC的源代码位于内核的scripts/dtc目录，在Linux内核使能了Device Tree的情况下，编译内核的时候主机工具dtc会被编译出来，对应scripts/dtc/Makefile中的“hostprogs-y := dtc”这一hostprogs编译target。
在Linux内核的arch/arm/boot/dts/Makefile中，描述了当某种SoC被选中后，哪些.dtb文件会被编译出来，如与VEXPRESS对应的.dtb包括
在Linux下，我们可以单独编译Device Tree文件。当我们在Linux内核下运行make dtbs时，若我们之前选择了ARCH_VEXPRESS，上述.dtb都会由对应的.dts编译出来。因为arch/arm/Makefile中含有一个dtbs编译target项目

Device Tree Blob (.dtb)
.dtb是.dts被DTC编译后的二进制格式的Device Tree描述，可由Linux内核解析。通常在我们为电路板制作NAND、SD启动image时，会为.dtb文件单独留下一个很小的区域以存放之，之后bootloader在引导kernel的过程中，会先读取该.dtb到内存。

__atags_pointer:kernel支持旧的tag list的方式，同时也支持device tree的方式。r2可能是device tree binary file的指针（bootloader要传递给内核之前要copy到memory中），也可以能是tag list的指针。在ARM的汇编部分的启动代码中（主要是head.S和head-common.S），machine type ID和指向DTB或者atags的指针被保存在变量__machine_arch_type和__atags_pointer中，这么做是为了后续c代码进行处理。可以参看内核中的文档，文档在/documentation/arm/booting.txt。

s805平台，将*.dtb拼接到了boot.img中，拼接顺序 uImage+ramdisk.img+*.dtb，具体可以参见/device/amlogic/m201/quick_build_kernel.sh中的生成命令。
uboot中会读取dtb文件，放到指定的内存地址上，将内存地址放到 R2 寄存器中。如没有dtb内容，则将tag list传递给内核。

Device Tree带来的改变
1、ARM的核心代码仍然保存在arch/arm目录下
2、ARM SoC core architecture code保存在arch/arm目录下
3、ARM SOC的周边外设模块的驱动保存在drivers目录下
4、ARM SOC的特定代码在arch/arm/mach-xxx目录下
5、ARM SOC board specific的代码被移除，由Device Tree机制来负责传递硬件拓扑和硬件资源信息。 

1、识别platform的信息
2、runtime的配置参数
3、设备的拓扑结构以及特性
对于嵌入式系统，在系统启动阶段，bootloader会加载内核并将控制权转交给内核，此外，还需要把上述的三个参数信息传递给kernel，以便kernel可以有较大的灵活性。在linux kernel中，Device Tree的设计目标就是如此。 


amlogic平台cpu freq相关
（1）amlogic的dts部分在common/arch/arm/boot/dts/amlogic中，它里面全是*.dtd，不是标准的*.dts；他是利用scripts/amlogic/aml_dtd.sh将*.dtd转换成*.dtb。
（2）s805使用的dtd表为meson8b_m201_1G.dtd，其中与dvfs相关的表为dvfs_table和cs_voltage_table。
（3）频率调整注意：升高频率，先增加cpu核电压，在设置cpu频率；降低频率，先设置cpu频率，在降低核电压。

cpu中smp
cpu核的开关控制调用过程简述：
（1）内核中的通用代码，在 arch/arm/kernel/smp.c
（2）平台相关代码在 arch/arm/mach-meson8b/smp.c
（3）通用代码中的smp.c会调用平台相关中的smp.c中相关函数。

在Linux系统中，对于多核的ARM芯片而言，Bootrom代码中，CPU0会率先起来，引导Bootloader和Linux内核执行，而其他的核则在上电时Bootrom一般将自身置于WFI或者WFE状态，并等待CPU0给其发CPU核间中断（IPI）或事件（一般透过SEV指令）唤醒之。wfi（wait for interrupt） wfe(wait for event)
2. WFI和WFE

1）共同点

WFI和WFE的功能非常类似，以ARMv8-A为例（参考DDI0487A_d_armv8_arm.pdf的描述），主要是“将ARMv8-A PE(Processing Element, 处理单元)设置为low-power standby state”。

需要说明的是，ARM architecture并没有规定“low-power standby state”的具体形式，因而可以由ARM core自行发挥，根据ARM的建议，一般可以实现为standby（关闭clock、保持供电）、dormant、shutdown等等。但有个原则，不能造成内存一致性的问题。以Cortex-A57 ARM core为例，它把WFI和WFE实现为“put the core in a low-power state by disabling the clocks in the core while keeping the core powered up”，即我们通常所说的standby模式，保持供电，关闭clock。

2）不同点

那它们的区别体现在哪呢？主要体现进入和退出的方式上。

对WFI来说，执行WFI指令后，ARM core会立即进入low-power standby state，直到有WFI Wakeup events发生。

而WFE则稍微不同，执行WFE指令后，根据Event Register（一个单bit的寄存器，每个PE一个）的状态，有两种情况：如果Event Register为1，该指令会把它清零，然后执行完成（不会standby）；如果Event Register为0，和WFI类似，进入low-power standby state，直到有WFE Wakeup events发生。

WFI wakeup event和WFE wakeup event可以分别让Core从WFI和WFE状态唤醒，这两类Event大部分相同，如任何的IRQ中断、FIQ中断等等，一些细微的差别，可以参考“DDI0487A_d_armv8_arm.pdf“的描述。而最大的不同是，WFE可以被任何PE上执行的SEV指令唤醒。

所谓的SEV指令，就是一个用来改变Event Register的指令，有两个：SEV会修改所有PE上的寄存器；SEVL，只修改本PE的寄存器值。下面让我们看看WFE这种特殊设计的使用场景。
3. 使用场景

1）WFI

WFI一般用于cpuidle。

2）WFE

WFE的一个典型使用场景，是用在spinlock中（可参考arch_spin_lock，对arm64来说，位于arm64/include/asm/spinlock.h中）。spinlock的功能，是在不同CPU core之间，保护共享资源。使用WFE的流程是：

    a）资源空闲

    b）Core1访问资源，acquire lock，获得资源

    c）Core2访问资源，此时资源不空闲，执行WFE指令，让core进入low-power state

    d）Core1释放资源，release lock，释放资源，同时执行SEV指令，唤醒Core2

    e）Core2获得资源

以往的spinlock，在获得不到资源时，让Core进入busy loop，而通过插入WFE指令，可以节省功耗，也算是因祸（损失了性能）得福（降低了功耗）吧。


Cache的一致性也只能通过其SCU（Snoop Control Unit）在这4个Core之间实现。

利用UML(User Mode Linux)调试内核代码 
利用UML(User Mode Linux)调试内核代码，可用gdb单步跟踪每行代码，在用户态运行linux内核，即将内核当作一个应用程序在跑.
用户模式的Linux(UML：User-Mode Linux)是指将Linux作为一个独立的、可移植的Linux内核而创建，其实现包含在子目录arch/um中。然而，它并不是运行在某种新的硬件之上，而是运行在基于Linux系统调用接口所实现的虚拟机之上。因此用户模式的Linux可以使得Linux内核成为一个运行在Linux系统之上的、独立的用户模式进程。
将一个内核的副本当做用户模式下的进程来运行有多个优势。首先其运行在一个受约束的虚拟处理器上，所以有错误的内核不会破坏“真正”的系统；其次对软/硬件的不同配置可以在相同的框架下进行不同的尝试；更重要的是对Linux内核开发人员来说，可以轻易利用gdb对用户模式Linux进行调试，因为归根到底它始终是一个进程。因此利用UML一方面可以加快Linux内核的开发过程；另一方面也有助于我们对Linux内核运行机制的了解。

mx的视频比例调整，通过代码中的videoplayer查看得出，当为3D模式时会使用如下相关代码如下
int SYS_set_3D_view_mode(SYS_3D_VIEW_MODE_SET vmode){
	int ret = -1;
	int ppmgrfd = open("/dev/ppmgr", O_RDWR);
	if(ppmgrfd<0){
		LOGE("VideoPlayer open ppmgr, error (%s)\n", strerror(errno));
		return ppmgrfd;		
	}	
	switch(vmode){
		case SYS_3D_VIEW_NORMAL:
			ret = ioctl(ppmgrfd, PPMGR_IOC_VIEW_MODE, SYS_3D_VIEW_NORMAL);
			break;
		case SYS_3D_VIEW_FULL:
			ret = ioctl(ppmgrfd, PPMGR_IOC_VIEW_MODE, SYS_3D_VIEW_FULL);
			break;
		case SYS_3D_VIEW_4_3:
			ret = ioctl(ppmgrfd, PPMGR_IOC_VIEW_MODE, SYS_3D_VIEW_4_3);
			break;
		case SYS_3D_VIEW_16_9:
			ret = ioctl(ppmgrfd, PPMGR_IOC_VIEW_MODE, SYS_3D_VIEW_16_9);
			break;
		case SYS_3D_VIEW_NO_SCALEUP:
			ret = ioctl(ppmgrfd, PPMGR_IOC_VIEW_MODE,SYS_3D_VIEW_NO_SCALEUP);
			break;
		default:
			LOGE("invalid case,never see this line,vmode value:%d\n",vmode);
			break;
	}
	if(ret < 0)
		LOGE("VideoPlayer SYS_set_3D_view_mode function error");
			
	if(ppmgrfd>0){
		close(ppmgrfd);
	}
	return 0;
}
当为普通时，则使用playservice/screenmode.java中代码进行设置，操作 /sys/class/video/screen_mode 即可。对应值
public static final int NORMAL = 0;
	public static final int FULLSTRETCH = 1;
	public static final int RATIO4_3 = 2;
	public static final int RATIO16_9 = 3;
public static final int NORMAL_NOSCALEUP = 4;

内核生成过程
vmlinux(ELF目标文件，严格意义上内核)->objcopy->image(二进制目标文件，已去除符号、标记、注释的二进制镜像)->gzip->piggy.gz->asm->vmlinux(piggy.o,misc.o,big_endian.o,head.o,etc.)此处命名不太合适->zImage(针对uboot来说，它是未压缩的，因为uboot无法解压)

